#!/usr/bin/env python3
# coding=utf-8

import sys
import csv
from enum import Enum

__author__ = "Philip Huppert"
__copyright__ = "Copyright 2016, Philip Huppert"
__license__ = "MIT"


class Severity(Enum):
    """Enum specifying severities of findings."""

    # testssl.sh errors
    DEBUG = 10
    MINOR_ERROR = 20
    ERROR = 30

    # no impact on security
    INFO = 100
    OK = 110

    # security relevant findings
    MINOR = 120
    WARN = 130
    MEDIUM = 140
    NOT_OK = 150


class ReportFinding(object):
    """Class to describe a single finding/fact of a scan."""

    def __init__(self, id, fqdn, ip, port, description, severity):
        self.id = id
        self.fqdn = fqdn
        self.ip = ip
        self.port = port
        self.description = description
        self.severity = severity

    def __str__(self):
        return "<ReportFinding (%s) %s @ %s:%d>" % (self.severity.name, self.id, self.ip, self.port)


class SSLReport(object):
    """Collecting of findings generated during an SSL scan."""

    def __init__(self, findings, target_hosts):
        self.findings = findings
        self.target_hosts = target_hosts

    def __iter__(self):
        return iter(self.findings)

    @staticmethod
    def fromCSV(csv_fh):
        """Build a SSLReport from a CSV file generated by testssl.sh."""

        reader = csv.DictReader(csv_fh)

        findings = []
        target_hosts = set()

        for line in reader:
            fqdn, _, ip = line["fqdn/ip"].partition("/")
            port = int(line["port"])
            host = (ip, port)
            severity = Severity[line["severity"].replace(" ", "_").upper()]

            finding = ReportFinding(
                    id=line["id"],
                    fqdn=fqdn,
                    ip=ip,
                    port=port,
                    description=line["finding"],
                    severity=severity
            )

            findings.append(finding)
            target_hosts.add(host)

        return SSLReport(findings, target_hosts)

    def __str__(self):
        if len(self.target_hosts) == 0:
            hosts = "no hosts"
        elif len(self.target_hosts) == 1:
            hosts = "%s:%d" % next(iter(self.target_hosts))
        else:
            hosts = "%d hosts" % len(self.target_hosts)

        if len(self.findings) == 0:
            findings = "no findings"
        elif len(self.findings) == 1:
            findings = "1 finding"
        else:
            findings = "%d findings" % len(self.findings)

        return "<SSLReport for " + hosts + " ; " + findings + ">"

    def print(self, stream=sys.stdout):
        hosts = ", ".join(["%s:%d" % h for h in sorted(self.target_hosts)])
        multi_host = len(self.target_hosts) > 1
        stream.write("SSL Report for " + hosts + "\n")

        findings = sorted(self.findings, key=lambda x: (x.ip, x.port, x.severity.value, x.id))
        for finding in findings:
            if not multi_host:
                tpl = " * {sev} <{id}> {desc}\n"
            else:
                tpl = " * @{ip}:{port} {sev} <{id}> {desc}\n"

            stream.write(tpl.format(
                ip=finding.ip,
                port=finding.port,
                sev=finding.severity.name,
                id=finding.id,
                desc=finding.description
            ))

        stream.write("\n")


class ReportFilter(object):
    """Class to filter the findings of an SSLReport."""

    def __init__(self, included_severities=None, excluded_ids=None):
        self.incl_sev = None
        self.excl_ids = None

        if included_severities is not None:
            self.incl_sev = set(included_severities)

        if excluded_ids is not None:
            self.excl_ids = set(excluded_ids)

    def filter_report(self, report):
        filtered = []
        target_hosts = set()

        for finding in report:
            if (
                    self.incl_sev is not None
                    and finding.severity not in self.incl_sev
                ) or (
                    self.excl_ids is not None
                    and finding.id in self.excl_ids
                ):
                continue

            filtered.append(finding)
            host = (finding.ip, finding.port)
            target_hosts.add(host)

        return SSLReport(filtered, target_hosts)


def main():
    csv_files = sys.argv[1:]
    assert len(csv_files) > 0

    reports = []
    for csv_file in csv_files:
        with open(csv_file, "r") as fh:
            report = SSLReport.fromCSV(fh)
        reports.append(report)

    f = ReportFilter(
            included_severities = [
                Severity.MINOR,
                Severity.WARN,
                Severity.MEDIUM,
                Severity.NOT_OK
            ],
            excluded_ids = [

            ]
    )

    for report in reports:
        f.filter_report(report).print()


if __name__ == "__main__":
    main()

